# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    cache_ttl: '%env(int:CACHE_TTL)%'
    # Добавление параметров, например
    # app.some_parameter: 'some_value'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Domain/Entity/'
            - '../src/Domain/ValueObject/'
            - '../src/Kernel.php'

    # Exception Listener для логирования 500-х ошибок
    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    # Repositories
    App\Infrastructure\Repository\Doctrine\GroupRepository:
        arguments:
            $entity_class: App\Domain\Entity\Group

    App\Infrastructure\Repository\Doctrine\TeacherRepository:
        arguments:
            $entity_class: App\Domain\Entity\Teacher

    App\Infrastructure\Repository\Doctrine\SkillRepository:
        arguments:
            $entity_class: App\Domain\Entity\Skill

    App\Infrastructure\Repository\Doctrine\StudentRepository:
        arguments:
            $entity_class: App\Domain\Entity\Student

    App\Infrastructure\Repository\Doctrine\UserRepository:
        arguments:
            $entity_class: App\Domain\Entity\User

    # Repository Interfaces
    App\Domain\Repository\TeacherRepositoryInterface:
        alias: App\Infrastructure\Repository\Doctrine\TeacherRepository

    App\Domain\Repository\GroupRepositoryInterface:
        alias: App\Infrastructure\Repository\Doctrine\GroupRepository

    App\Domain\Repository\SkillRepositoryInterface:
        alias: App\Infrastructure\Repository\Doctrine\SkillRepository

    App\Domain\Repository\StudentRepositoryInterface:
        alias: App\Infrastructure\Repository\Doctrine\StudentRepository

    App\Domain\Repository\UserRepositoryInterface:
        alias: App\Infrastructure\Repository\Doctrine\UserRepository

    # Domain Services
    App\Domain\Service\GroupService:
        arguments:
            $group_repository: '@App\Domain\Repository\GroupRepositoryInterface'
            $skill_repository: '@App\Domain\Repository\SkillRepositoryInterface'

    App\Domain\Service\TeacherService:
        arguments:
            $teacher_repository: '@App\Domain\Repository\TeacherRepositoryInterface'
            $skill_repository: '@App\Domain\Repository\SkillRepositoryInterface'
            $teacher_skills_producer: '@old_sound_rabbit_mq.teacher_skills_producer'
            $cache_invalidation_producer: '@cache_invalidation_producer'

    App\Domain\Service\StudentService:
        arguments:
            $student_repository: '@App\Domain\Repository\StudentRepositoryInterface'
            $skill_repository: '@App\Domain\Repository\SkillRepositoryInterface'

    App\Domain\Service\SkillService:
        arguments:
            $skill_repository: '@App\Domain\Repository\SkillRepositoryInterface'

    # Service Interfaces
    App\Domain\Service\GroupServiceInterface:
        alias: App\Domain\Service\GroupService

    App\Domain\Service\TeacherServiceInterface:
        alias: App\Domain\Service\TeacherService

    App\Domain\Service\StudentServiceInterface:
        alias: App\Domain\Service\StudentService

    App\Domain\Service\SkillServiceInterface:
        alias: App\Domain\Service\SkillService

    # Cache configuration
    Symfony\Component\Cache\Adapter\TagAwareAdapterInterface: '@cache.app.taggable'

    # RabbitMQ producers
    teacher_skills_producer:
        class: OldSound\RabbitMqBundle\RabbitMq\Producer
        arguments: ['@old_sound_rabbit_mq.connection.default']
        calls:
            - [setExchangeOptions, [{ name: 'teacher_skills', type: direct }]]

    teacher_groups_producer:
        class: OldSound\RabbitMqBundle\RabbitMq\Producer
        arguments: ['@old_sound_rabbit_mq.connection.default']
        calls:
            - [setExchangeOptions, [{ name: 'teacher_groups', type: direct }]]

    cache_invalidation_producer:
        class: OldSound\RabbitMqBundle\RabbitMq\Producer
        arguments: ['@old_sound_rabbit_mq.connection.default']
        calls:
            - [setExchangeOptions, [{ name: 'cache_invalidation', type: direct }]]

    # API Controllers
    App\Interface\Controller\Api\V1\:
        resource: '../src/Interface/Controller/Api/V1/'
        tags: ['controller.service_arguments']

    App\Interface\Controller\Api\V1\Teacher\GetAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    App\Interface\Controller\Api\V1\Teacher\ListAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    App\Interface\Controller\Api\V1\Student\GetAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    App\Interface\Controller\Api\V1\Student\ListAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    # Configure controllers with cache_ttl
    App\Interface\Controller\Api\V1\Group\GetAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    App\Interface\Controller\Api\V1\Group\ListAction:
        arguments:
            $cache_ttl: '%cache_ttl%'

    App\Infrastructure\MessageHandler\CacheInvalidationMessageHandler:
        arguments:
            $logger: '@monolog.logger.cache_invalidation'