security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Domain\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            security: true
            stateless: true
            custom_authenticators:
                - App\Application\Security\TokenAuthenticator
        web:
            pattern: ^/(?!api)
            stateless: false
            custom_authenticators:
                - App\Application\Security\AppLoginAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # TODO: пересмотреть как работать со стратегиями

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      # API Groups
      - { path: ^/api/v1/groups$, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/groups/\d+, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/groups.*$, roles: [ ROLE_ADMIN ], methods: [ POST, PATCH, PUT, DELETE ] }
      # API Roles
      - { path: ^/api/v1/roles$, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/roles/\d+, roles: ROLE_BASE, methods: [ GET ] }
      - { path: ^/api/v1/roles.*$, roles: [ ROLE_ADMIN ], methods: [ POST, PATCH, PUT, DELETE ] }
      # API Skills
      - { path: ^/api/v1/skills$, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/skills/\d+, roles: ROLE_BASE, methods: [ GET ] }
      - { path: ^/api/v1/skills.*$, roles: [ ROLE_ADMIN ], methods: [ POST, PATCH, PUT, DELETE ] }
      # API Users
      - { path: ^/api/v1/users$, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/users/\d+, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/api/v1/users.*$, roles: [ ROLE_ADMIN ], methods: [ POST, PATCH, PUT, DELETE ] }
      # WEB Формы
      - { path: ^/groups/form-create$, roles: [ ROLE_ADMIN, ROLE_TEACHER ], methods: [ GET, POST ] }
      - { path: ^/groups/form-update/\d+, roles: [ ROLE_ADMIN ], methods: [ GET, POST ] }
      - { path: ^/users$, roles: [ ROLE_BASE ], methods: [ GET ] }
      - { path: ^/users/form-create$, roles: [ ], methods: [ GET, POST ] }
      - { path: ^/users/form-update.*$, roles: [ ROLE_ADMIN ], methods: [ GET, POST ] }
      - { path: ^/users/form-update/\d+, roles: [ ROLE_ADMIN ], methods: [ GET, POST ] }
      # Страница для тестов функционала
      - { path: ^/hello_world, roles: [ PUBLIC_ACCESS ], methods: [ GET ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
